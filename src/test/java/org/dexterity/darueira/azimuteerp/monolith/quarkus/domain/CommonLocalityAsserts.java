package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommonLocalityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommonLocalityAllPropertiesEquals(CommonLocality expected, CommonLocality actual) {
        assertCommonLocalityAutoGeneratedPropertiesEquals(expected, actual);
        assertCommonLocalityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommonLocalityAllUpdatablePropertiesEquals(CommonLocality expected, CommonLocality actual) {
        assertCommonLocalityUpdatableFieldsEquals(expected, actual);
        assertCommonLocalityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommonLocalityAutoGeneratedPropertiesEquals(CommonLocality expected, CommonLocality actual) {
        assertThat(expected)
            .as("Verify CommonLocality auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommonLocalityUpdatableFieldsEquals(CommonLocality expected, CommonLocality actual) {
        assertThat(expected)
            .as("Verify CommonLocality relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.streetAddress).as("check streetAddress").isEqualTo(actual.streetAddress))
            .satisfies(e -> assertThat(e.houseNumber).as("check houseNumber").isEqualTo(actual.houseNumber))
            .satisfies(e -> assertThat(e.locationName).as("check locationName").isEqualTo(actual.locationName))
            .satisfies(e -> assertThat(e.postalCode).as("check postalCode").isEqualTo(actual.postalCode))
            .satisfies(e -> assertThat(e.geoPolygonArea).as("check geoPolygonArea").isEqualTo(actual.geoPolygonArea))
            .satisfies(
                e ->
                    assertThat(e.geoPolygonAreaContentType)
                        .as("check geoPolygonArea contenty type")
                        .isEqualTo(actual.geoPolygonAreaContentType)
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommonLocalityUpdatableRelationshipsEquals(CommonLocality expected, CommonLocality actual) {
        assertThat(expected)
            .as("Verify CommonLocality relationships")
            .satisfies(e -> assertThat(e.district).as("check district").isEqualTo(actual.district));
    }
}
