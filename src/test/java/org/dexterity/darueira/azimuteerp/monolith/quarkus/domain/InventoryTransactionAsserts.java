package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InventoryTransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAllPropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertInventoryTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertInventoryTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAllUpdatablePropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertInventoryTransactionUpdatableFieldsEquals(expected, actual);
        assertInventoryTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionAutoGeneratedPropertiesEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionUpdatableFieldsEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction relevant properties")
            .satisfies(e -> assertThat(e.invoiceId).as("check invoiceId").isEqualTo(actual.invoiceId))
            .satisfies(
                e -> assertThat(e.transactionCreatedDate).as("check transactionCreatedDate").isEqualTo(actual.transactionCreatedDate)
            )
            .satisfies(
                e -> assertThat(e.transactionModifiedDate).as("check transactionModifiedDate").isEqualTo(actual.transactionModifiedDate)
            )
            .satisfies(e -> assertThat(e.quantity).as("check quantity").isEqualTo(actual.quantity))
            .satisfies(e -> assertThat(e.transactionComments).as("check transactionComments").isEqualTo(actual.transactionComments))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInventoryTransactionUpdatableRelationshipsEquals(InventoryTransaction expected, InventoryTransaction actual) {
        assertThat(expected)
            .as("Verify InventoryTransaction relationships")
            .satisfies(e -> assertThat(e.supplier).as("check supplier").isEqualTo(actual.supplier))
            .satisfies(e -> assertThat(e.product).as("check product").isEqualTo(actual.product))
            .satisfies(e -> assertThat(e.warehouse).as("check warehouse").isEqualTo(actual.warehouse));
    }
}
