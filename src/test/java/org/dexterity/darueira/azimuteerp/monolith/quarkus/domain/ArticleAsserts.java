package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static org.dexterity.darueira.azimuteerp.monolith.quarkus.domain.AssertUtils.bigDecimalCompareTo;

public class ArticleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAllPropertiesEquals(Article expected, Article actual) {
        assertArticleAutoGeneratedPropertiesEquals(expected, actual);
        assertArticleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAllUpdatablePropertiesEquals(Article expected, Article actual) {
        assertArticleUpdatableFieldsEquals(expected, actual);
        assertArticleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleAutoGeneratedPropertiesEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleUpdatableFieldsEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article relevant properties")
            .satisfies(e -> assertThat(e.inventoryProductId).as("check inventoryProductId").isEqualTo(actual.inventoryProductId))
            .satisfies(e -> assertThat(e.skuCode).as("check skuCode").isEqualTo(actual.skuCode))
            .satisfies(e -> assertThat(e.customName).as("check customName").isEqualTo(actual.customName))
            .satisfies(e -> assertThat(e.customDescription).as("check customDescription").isEqualTo(actual.customDescription))
            .satisfies(
                e -> assertThat(e.priceValue).as("check priceValue").usingComparator(bigDecimalCompareTo).isEqualTo(actual.priceValue)
            )
            .satisfies(e -> assertThat(e.itemSize).as("check itemSize").isEqualTo(actual.itemSize))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArticleUpdatableRelationshipsEquals(Article expected, Article actual) {
        assertThat(expected)
            .as("Verify Article relationships")
            .satisfies(e -> assertThat(e.assetCollections).as("check assetCollections").isEqualTo(actual.assetCollections))
            .satisfies(e -> assertThat(e.mainCategory).as("check mainCategory").isEqualTo(actual.mainCategory));
    }
}
