package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganizationRoleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationRoleAllPropertiesEquals(OrganizationRole expected, OrganizationRole actual) {
        assertOrganizationRoleAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganizationRoleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationRoleAllUpdatablePropertiesEquals(OrganizationRole expected, OrganizationRole actual) {
        assertOrganizationRoleUpdatableFieldsEquals(expected, actual);
        assertOrganizationRoleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationRoleAutoGeneratedPropertiesEquals(OrganizationRole expected, OrganizationRole actual) {
        assertThat(expected)
            .as("Verify OrganizationRole auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationRoleUpdatableFieldsEquals(OrganizationRole expected, OrganizationRole actual) {
        assertThat(expected)
            .as("Verify OrganizationRole relevant properties")
            .satisfies(e -> assertThat(e.roleName).as("check roleName").isEqualTo(actual.roleName))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationRoleUpdatableRelationshipsEquals(OrganizationRole expected, OrganizationRole actual) {
        assertThat(expected)
            .as("Verify OrganizationRole relationships")
            .satisfies(e -> assertThat(e.organization).as("check organization").isEqualTo(actual.organization));
    }
}
