package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganizationMemberRoleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationMemberRoleAllPropertiesEquals(OrganizationMemberRole expected, OrganizationMemberRole actual) {
        assertOrganizationMemberRoleAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganizationMemberRoleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationMemberRoleAllUpdatablePropertiesEquals(
        OrganizationMemberRole expected,
        OrganizationMemberRole actual
    ) {
        assertOrganizationMemberRoleUpdatableFieldsEquals(expected, actual);
        assertOrganizationMemberRoleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationMemberRoleAutoGeneratedPropertiesEquals(
        OrganizationMemberRole expected,
        OrganizationMemberRole actual
    ) {
        assertThat(expected)
            .as("Verify OrganizationMemberRole auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationMemberRoleUpdatableFieldsEquals(OrganizationMemberRole expected, OrganizationMemberRole actual) {
        assertThat(expected)
            .as("Verify OrganizationMemberRole relevant properties")
            .satisfies(e -> assertThat(e.joinedAt).as("check joinedAt").isEqualTo(actual.joinedAt));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganizationMemberRoleUpdatableRelationshipsEquals(
        OrganizationMemberRole expected,
        OrganizationMemberRole actual
    ) {
        assertThat(expected)
            .as("Verify OrganizationMemberRole relationships")
            .satisfies(
                e -> assertThat(e.organizationMembership).as("check organizationMembership").isEqualTo(actual.organizationMembership)
            )
            .satisfies(e -> assertThat(e.organizationRole).as("check organizationRole").isEqualTo(actual.organizationRole));
    }
}
