package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TypeOfOrganizationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeOfOrganizationAllPropertiesEquals(TypeOfOrganization expected, TypeOfOrganization actual) {
        assertTypeOfOrganizationAutoGeneratedPropertiesEquals(expected, actual);
        assertTypeOfOrganizationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeOfOrganizationAllUpdatablePropertiesEquals(TypeOfOrganization expected, TypeOfOrganization actual) {
        assertTypeOfOrganizationUpdatableFieldsEquals(expected, actual);
        assertTypeOfOrganizationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeOfOrganizationAutoGeneratedPropertiesEquals(TypeOfOrganization expected, TypeOfOrganization actual) {
        assertThat(expected)
            .as("Verify TypeOfOrganization auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeOfOrganizationUpdatableFieldsEquals(TypeOfOrganization expected, TypeOfOrganization actual) {
        assertThat(expected)
            .as("Verify TypeOfOrganization relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.businessHandlerClazz).as("check businessHandlerClazz").isEqualTo(actual.businessHandlerClazz));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTypeOfOrganizationUpdatableRelationshipsEquals(TypeOfOrganization expected, TypeOfOrganization actual) {}
}
