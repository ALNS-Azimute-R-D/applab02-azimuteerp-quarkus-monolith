package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BusinessUnitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessUnitAllPropertiesEquals(BusinessUnit expected, BusinessUnit actual) {
        assertBusinessUnitAutoGeneratedPropertiesEquals(expected, actual);
        assertBusinessUnitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessUnitAllUpdatablePropertiesEquals(BusinessUnit expected, BusinessUnit actual) {
        assertBusinessUnitUpdatableFieldsEquals(expected, actual);
        assertBusinessUnitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessUnitAutoGeneratedPropertiesEquals(BusinessUnit expected, BusinessUnit actual) {
        assertThat(expected)
            .as("Verify BusinessUnit auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessUnitUpdatableFieldsEquals(BusinessUnit expected, BusinessUnit actual) {
        assertThat(expected)
            .as("Verify BusinessUnit relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.hierarchicalLevel).as("check hierarchicalLevel").isEqualTo(actual.hierarchicalLevel))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBusinessUnitUpdatableRelationshipsEquals(BusinessUnit expected, BusinessUnit actual) {
        assertThat(expected)
            .as("Verify BusinessUnit relationships")
            .satisfies(e -> assertThat(e.organization).as("check organization").isEqualTo(actual.organization))
            .satisfies(e -> assertThat(e.businessUnitParent).as("check businessUnitParent").isEqualTo(actual.businessUnitParent));
    }
}
