package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllPropertiesEquals(Asset expected, Asset actual) {
        assertAssetAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAllUpdatablePropertiesEquals(Asset expected, Asset actual) {
        assertAssetUpdatableFieldsEquals(expected, actual);
        assertAssetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetAutoGeneratedPropertiesEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableFieldsEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset relevant properties")
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.storageTypeUsed).as("check storageTypeUsed").isEqualTo(actual.storageTypeUsed))
            .satisfies(e -> assertThat(e.fullFilenamePath).as("check fullFilenamePath").isEqualTo(actual.fullFilenamePath))
            .satisfies(e -> assertThat(e.status).as("check status").isEqualTo(actual.status))
            .satisfies(e -> assertThat(e.preferredPurpose).as("check preferredPurpose").isEqualTo(actual.preferredPurpose))
            .satisfies(e -> assertThat(e.assetContentAsBlob).as("check assetContentAsBlob").isEqualTo(actual.assetContentAsBlob))
            .satisfies(
                e ->
                    assertThat(e.assetContentAsBlobContentType)
                        .as("check assetContentAsBlob contenty type")
                        .isEqualTo(actual.assetContentAsBlobContentType)
            )
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetUpdatableRelationshipsEquals(Asset expected, Asset actual) {
        assertThat(expected)
            .as("Verify Asset relationships")
            .satisfies(e -> assertThat(e.assetType).as("check assetType").isEqualTo(actual.assetType))
            .satisfies(e -> assertThat(e.rawAssetProcTmp).as("check rawAssetProcTmp").isEqualTo(actual.rawAssetProcTmp));
    }
}
