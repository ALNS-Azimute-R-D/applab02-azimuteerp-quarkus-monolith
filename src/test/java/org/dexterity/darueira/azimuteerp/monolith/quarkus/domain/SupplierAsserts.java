package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SupplierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAllPropertiesEquals(Supplier expected, Supplier actual) {
        assertSupplierAutoGeneratedPropertiesEquals(expected, actual);
        assertSupplierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAllUpdatablePropertiesEquals(Supplier expected, Supplier actual) {
        assertSupplierUpdatableFieldsEquals(expected, actual);
        assertSupplierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierAutoGeneratedPropertiesEquals(Supplier expected, Supplier actual) {
        assertThat(expected)
            .as("Verify Supplier auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierUpdatableFieldsEquals(Supplier expected, Supplier actual) {
        assertThat(expected)
            .as("Verify Supplier relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.companyName).as("check companyName").isEqualTo(actual.companyName))
            .satisfies(e -> assertThat(e.streetAddress).as("check streetAddress").isEqualTo(actual.streetAddress))
            .satisfies(e -> assertThat(e.houseNumber).as("check houseNumber").isEqualTo(actual.houseNumber))
            .satisfies(e -> assertThat(e.locationName).as("check locationName").isEqualTo(actual.locationName))
            .satisfies(e -> assertThat(e.city).as("check city").isEqualTo(actual.city))
            .satisfies(e -> assertThat(e.stateProvince).as("check stateProvince").isEqualTo(actual.stateProvince))
            .satisfies(e -> assertThat(e.zipPostalCode).as("check zipPostalCode").isEqualTo(actual.zipPostalCode))
            .satisfies(e -> assertThat(e.countryRegion).as("check countryRegion").isEqualTo(actual.countryRegion))
            .satisfies(e -> assertThat(e.pointLocation).as("check pointLocation").isEqualTo(actual.pointLocation))
            .satisfies(
                e ->
                    assertThat(e.pointLocationContentType)
                        .as("check pointLocation contenty type")
                        .isEqualTo(actual.pointLocationContentType)
            )
            .satisfies(e -> assertThat(e.mainEmail).as("check mainEmail").isEqualTo(actual.mainEmail))
            .satisfies(e -> assertThat(e.phoneNumber1).as("check phoneNumber1").isEqualTo(actual.phoneNumber1))
            .satisfies(e -> assertThat(e.phoneNumber2).as("check phoneNumber2").isEqualTo(actual.phoneNumber2))
            .satisfies(
                e ->
                    assertThat(e.customAttributesDetailsJSON)
                        .as("check customAttributesDetailsJSON")
                        .isEqualTo(actual.customAttributesDetailsJSON)
            )
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSupplierUpdatableRelationshipsEquals(Supplier expected, Supplier actual) {
        assertThat(expected)
            .as("Verify Supplier relationships")
            .satisfies(e -> assertThat(e.representativePerson).as("check representativePerson").isEqualTo(actual.representativePerson));
    }
}
