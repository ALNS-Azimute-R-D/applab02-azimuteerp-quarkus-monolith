package org.dexterity.darueira.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssetCollectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetCollectionAllPropertiesEquals(AssetCollection expected, AssetCollection actual) {
        assertAssetCollectionAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetCollectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetCollectionAllUpdatablePropertiesEquals(AssetCollection expected, AssetCollection actual) {
        assertAssetCollectionUpdatableFieldsEquals(expected, actual);
        assertAssetCollectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetCollectionAutoGeneratedPropertiesEquals(AssetCollection expected, AssetCollection actual) {
        assertThat(expected)
            .as("Verify AssetCollection auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetCollectionUpdatableFieldsEquals(AssetCollection expected, AssetCollection actual) {
        assertThat(expected)
            .as("Verify AssetCollection relevant properties")
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.fullFilenamePath).as("check fullFilenamePath").isEqualTo(actual.fullFilenamePath))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetCollectionUpdatableRelationshipsEquals(AssetCollection expected, AssetCollection actual) {
        assertThat(expected)
            .as("Verify AssetCollection relationships")
            .satisfies(e -> assertThat(e.assets).as("check assets").isEqualTo(actual.assets));
    }
}
