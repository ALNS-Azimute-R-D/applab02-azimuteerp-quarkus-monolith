package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PersonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllPropertiesEquals(Person expected, Person actual) {
        assertPersonAutoGeneratedPropertiesEquals(expected, actual);
        assertPersonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAllUpdatablePropertiesEquals(Person expected, Person actual) {
        assertPersonUpdatableFieldsEquals(expected, actual);
        assertPersonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonAutoGeneratedPropertiesEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableFieldsEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person relevant properties")
            .satisfies(e -> assertThat(e.firstName).as("check firstName").isEqualTo(actual.firstName))
            .satisfies(e -> assertThat(e.lastName).as("check lastName").isEqualTo(actual.lastName))
            .satisfies(e -> assertThat(e.birthDate).as("check birthDate").isEqualTo(actual.birthDate))
            .satisfies(e -> assertThat(e.gender).as("check gender").isEqualTo(actual.gender))
            .satisfies(e -> assertThat(e.codeBI).as("check codeBI").isEqualTo(actual.codeBI))
            .satisfies(e -> assertThat(e.codeNIF).as("check codeNIF").isEqualTo(actual.codeNIF))
            .satisfies(e -> assertThat(e.streetAddress).as("check streetAddress").isEqualTo(actual.streetAddress))
            .satisfies(e -> assertThat(e.houseNumber).as("check houseNumber").isEqualTo(actual.houseNumber))
            .satisfies(e -> assertThat(e.locationName).as("check locationName").isEqualTo(actual.locationName))
            .satisfies(e -> assertThat(e.postalCode).as("check postalCode").isEqualTo(actual.postalCode))
            .satisfies(e -> assertThat(e.mainEmail).as("check mainEmail").isEqualTo(actual.mainEmail))
            .satisfies(e -> assertThat(e.landPhoneNumber).as("check landPhoneNumber").isEqualTo(actual.landPhoneNumber))
            .satisfies(e -> assertThat(e.mobilePhoneNumber).as("check mobilePhoneNumber").isEqualTo(actual.mobilePhoneNumber))
            .satisfies(e -> assertThat(e.occupation).as("check occupation").isEqualTo(actual.occupation))
            .satisfies(e -> assertThat(e.preferredLanguage).as("check preferredLanguage").isEqualTo(actual.preferredLanguage))
            .satisfies(e -> assertThat(e.usernameInOAuth2).as("check usernameInOAuth2").isEqualTo(actual.usernameInOAuth2))
            .satisfies(e -> assertThat(e.userIdInOAuth2).as("check userIdInOAuth2").isEqualTo(actual.userIdInOAuth2))
            .satisfies(e -> assertThat(e.extraDetails).as("check extraDetails").isEqualTo(actual.extraDetails))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus))
            .satisfies(e -> assertThat(e.avatarImg).as("check avatarImg").isEqualTo(actual.avatarImg))
            .satisfies(e -> assertThat(e.avatarImgContentType).as("check avatarImg contenty type").isEqualTo(actual.avatarImgContentType));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPersonUpdatableRelationshipsEquals(Person expected, Person actual) {
        assertThat(expected)
            .as("Verify Person relationships")
            .satisfies(e -> assertThat(e.typeOfPerson).as("check typeOfPerson").isEqualTo(actual.typeOfPerson))
            .satisfies(e -> assertThat(e.district).as("check district").isEqualTo(actual.district))
            .satisfies(e -> assertThat(e.managerPerson).as("check managerPerson").isEqualTo(actual.managerPerson));
    }
}
