package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocalityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAllPropertiesEquals(Locality expected, Locality actual) {
        assertLocalityAutoGeneratedPropertiesEquals(expected, actual);
        assertLocalityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAllUpdatablePropertiesEquals(Locality expected, Locality actual) {
        assertLocalityUpdatableFieldsEquals(expected, actual);
        assertLocalityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityAutoGeneratedPropertiesEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityUpdatableFieldsEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.geoPolygonArea).as("check geoPolygonArea").isEqualTo(actual.geoPolygonArea))
            .satisfies(
                e ->
                    assertThat(e.geoPolygonAreaContentType)
                        .as("check geoPolygonArea contenty type")
                        .isEqualTo(actual.geoPolygonAreaContentType)
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalityUpdatableRelationshipsEquals(Locality expected, Locality actual) {
        assertThat(expected)
            .as("Verify Locality relationships")
            .satisfies(e -> assertThat(e.country).as("check country").isEqualTo(actual.country));
    }
}
