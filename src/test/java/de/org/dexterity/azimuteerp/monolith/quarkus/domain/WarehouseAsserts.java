package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WarehouseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseAllPropertiesEquals(Warehouse expected, Warehouse actual) {
        assertWarehouseAutoGeneratedPropertiesEquals(expected, actual);
        assertWarehouseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseAllUpdatablePropertiesEquals(Warehouse expected, Warehouse actual) {
        assertWarehouseUpdatableFieldsEquals(expected, actual);
        assertWarehouseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseAutoGeneratedPropertiesEquals(Warehouse expected, Warehouse actual) {
        assertThat(expected)
            .as("Verify Warehouse auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseUpdatableFieldsEquals(Warehouse expected, Warehouse actual) {
        assertThat(expected)
            .as("Verify Warehouse relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.streetAddress).as("check streetAddress").isEqualTo(actual.streetAddress))
            .satisfies(e -> assertThat(e.houseNumber).as("check houseNumber").isEqualTo(actual.houseNumber))
            .satisfies(e -> assertThat(e.locationName).as("check locationName").isEqualTo(actual.locationName))
            .satisfies(e -> assertThat(e.postalCode).as("check postalCode").isEqualTo(actual.postalCode))
            .satisfies(e -> assertThat(e.pointLocation).as("check pointLocation").isEqualTo(actual.pointLocation))
            .satisfies(
                e ->
                    assertThat(e.pointLocationContentType)
                        .as("check pointLocation contenty type")
                        .isEqualTo(actual.pointLocationContentType)
            )
            .satisfies(e -> assertThat(e.mainEmail).as("check mainEmail").isEqualTo(actual.mainEmail))
            .satisfies(e -> assertThat(e.landPhoneNumber).as("check landPhoneNumber").isEqualTo(actual.landPhoneNumber))
            .satisfies(e -> assertThat(e.mobilePhoneNumber).as("check mobilePhoneNumber").isEqualTo(actual.mobilePhoneNumber))
            .satisfies(e -> assertThat(e.faxNumber).as("check faxNumber").isEqualTo(actual.faxNumber))
            .satisfies(e -> assertThat(e.extraDetails).as("check extraDetails").isEqualTo(actual.extraDetails));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWarehouseUpdatableRelationshipsEquals(Warehouse expected, Warehouse actual) {}
}
