package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssetTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetTypeAllPropertiesEquals(AssetType expected, AssetType actual) {
        assertAssetTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetTypeAllUpdatablePropertiesEquals(AssetType expected, AssetType actual) {
        assertAssetTypeUpdatableFieldsEquals(expected, actual);
        assertAssetTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetTypeAutoGeneratedPropertiesEquals(AssetType expected, AssetType actual) {
        assertThat(expected)
            .as("Verify AssetType auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetTypeUpdatableFieldsEquals(AssetType expected, AssetType actual) {
        assertThat(expected)
            .as("Verify AssetType relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.handlerClazzName).as("check handlerClazzName").isEqualTo(actual.handlerClazzName))
            .satisfies(e -> assertThat(e.extraDetails).as("check extraDetails").isEqualTo(actual.extraDetails));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetTypeUpdatableRelationshipsEquals(AssetType expected, AssetType actual) {}
}
