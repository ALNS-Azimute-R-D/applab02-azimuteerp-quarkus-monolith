package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TownCityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTownCityAllPropertiesEquals(TownCity expected, TownCity actual) {
        assertTownCityAutoGeneratedPropertiesEquals(expected, actual);
        assertTownCityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTownCityAllUpdatablePropertiesEquals(TownCity expected, TownCity actual) {
        assertTownCityUpdatableFieldsEquals(expected, actual);
        assertTownCityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTownCityAutoGeneratedPropertiesEquals(TownCity expected, TownCity actual) {
        assertThat(expected)
            .as("Verify TownCity auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTownCityUpdatableFieldsEquals(TownCity expected, TownCity actual) {
        assertThat(expected)
            .as("Verify TownCity relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.geoPolygonArea).as("check geoPolygonArea").isEqualTo(actual.geoPolygonArea))
            .satisfies(
                e ->
                    assertThat(e.geoPolygonAreaContentType)
                        .as("check geoPolygonArea contenty type")
                        .isEqualTo(actual.geoPolygonAreaContentType)
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTownCityUpdatableRelationshipsEquals(TownCity expected, TownCity actual) {
        assertThat(expected)
            .as("Verify TownCity relationships")
            .satisfies(e -> assertThat(e.province).as("check province").isEqualTo(actual.province));
    }
}
