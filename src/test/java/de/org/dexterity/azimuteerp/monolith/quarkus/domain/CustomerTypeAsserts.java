package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CustomerTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerTypeAllPropertiesEquals(CustomerType expected, CustomerType actual) {
        assertCustomerTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertCustomerTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerTypeAllUpdatablePropertiesEquals(CustomerType expected, CustomerType actual) {
        assertCustomerTypeUpdatableFieldsEquals(expected, actual);
        assertCustomerTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerTypeAutoGeneratedPropertiesEquals(CustomerType expected, CustomerType actual) {
        assertThat(expected)
            .as("Verify CustomerType auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerTypeUpdatableFieldsEquals(CustomerType expected, CustomerType actual) {
        assertThat(expected)
            .as("Verify CustomerType relevant properties")
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.businessHandlerClazz).as("check businessHandlerClazz").isEqualTo(actual.businessHandlerClazz));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCustomerTypeUpdatableRelationshipsEquals(CustomerType expected, CustomerType actual) {}
}
