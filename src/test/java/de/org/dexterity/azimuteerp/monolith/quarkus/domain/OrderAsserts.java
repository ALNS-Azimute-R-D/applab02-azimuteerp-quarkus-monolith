package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static de.org.dexterity.azimuteerp.monolith.quarkus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllPropertiesEquals(Order expected, Order actual) {
        assertOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAllUpdatablePropertiesEquals(Order expected, Order actual) {
        assertOrderUpdatableFieldsEquals(expected, actual);
        assertOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderAutoGeneratedPropertiesEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableFieldsEquals(Order expected, Order actual) {
        assertThat(expected)
            .as("Verify Order relevant properties")
            .satisfies(e -> assertThat(e.businessCode).as("check businessCode").isEqualTo(actual.businessCode))
            .satisfies(e -> assertThat(e.customerUserId).as("check customerUserId").isEqualTo(actual.customerUserId))
            .satisfies(e -> assertThat(e.placedDate).as("check placedDate").isEqualTo(actual.placedDate))
            .satisfies(
                e ->
                    assertThat(e.totalTaxValue)
                        .as("check totalTaxValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.totalTaxValue)
            )
            .satisfies(
                e ->
                    assertThat(e.totalDueValue)
                        .as("check totalDueValue")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.totalDueValue)
            )
            .satisfies(e -> assertThat(e.status).as("check status").isEqualTo(actual.status))
            .satisfies(e -> assertThat(e.invoiceId).as("check invoiceId").isEqualTo(actual.invoiceId))
            .satisfies(e -> assertThat(e.estimatedDeliveryDate).as("check estimatedDeliveryDate").isEqualTo(actual.estimatedDeliveryDate));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrderUpdatableRelationshipsEquals(Order expected, Order actual) {}
}
