package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RawAssetProcTmpAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAllPropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertRawAssetProcTmpAutoGeneratedPropertiesEquals(expected, actual);
        assertRawAssetProcTmpAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAllUpdatablePropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertRawAssetProcTmpUpdatableFieldsEquals(expected, actual);
        assertRawAssetProcTmpUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpAutoGeneratedPropertiesEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpUpdatableFieldsEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp relevant properties")
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.statusRawProcessing).as("check statusRawProcessing").isEqualTo(actual.statusRawProcessing))
            .satisfies(e -> assertThat(e.fullFilenamePath).as("check fullFilenamePath").isEqualTo(actual.fullFilenamePath))
            .satisfies(e -> assertThat(e.assetRawContentAsBlob).as("check assetRawContentAsBlob").isEqualTo(actual.assetRawContentAsBlob))
            .satisfies(
                e ->
                    assertThat(e.assetRawContentAsBlobContentType)
                        .as("check assetRawContentAsBlob contenty type")
                        .isEqualTo(actual.assetRawContentAsBlobContentType)
            )
            .satisfies(e -> assertThat(e.extraDetails).as("check extraDetails").isEqualTo(actual.extraDetails));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRawAssetProcTmpUpdatableRelationshipsEquals(RawAssetProcTmp expected, RawAssetProcTmp actual) {
        assertThat(expected)
            .as("Verify RawAssetProcTmp relationships")
            .satisfies(e -> assertThat(e.assetType).as("check assetType").isEqualTo(actual.assetType));
    }
}
