package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StockLevelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAllPropertiesEquals(StockLevel expected, StockLevel actual) {
        assertStockLevelAutoGeneratedPropertiesEquals(expected, actual);
        assertStockLevelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAllUpdatablePropertiesEquals(StockLevel expected, StockLevel actual) {
        assertStockLevelUpdatableFieldsEquals(expected, actual);
        assertStockLevelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelAutoGeneratedPropertiesEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelUpdatableFieldsEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel relevant properties")
            .satisfies(e -> assertThat(e.lastModifiedDate).as("check lastModifiedDate").isEqualTo(actual.lastModifiedDate))
            .satisfies(e -> assertThat(e.ramainingQuantity).as("check ramainingQuantity").isEqualTo(actual.ramainingQuantity))
            .satisfies(e -> assertThat(e.extraDetails).as("check extraDetails").isEqualTo(actual.extraDetails));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStockLevelUpdatableRelationshipsEquals(StockLevel expected, StockLevel actual) {
        assertThat(expected)
            .as("Verify StockLevel relationships")
            .satisfies(e -> assertThat(e.warehouse).as("check warehouse").isEqualTo(actual.warehouse))
            .satisfies(e -> assertThat(e.product).as("check product").isEqualTo(actual.product));
    }
}
