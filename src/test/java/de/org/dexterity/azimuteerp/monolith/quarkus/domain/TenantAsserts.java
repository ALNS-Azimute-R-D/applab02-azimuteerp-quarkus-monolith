package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TenantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllPropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantAutoGeneratedPropertiesEquals(expected, actual);
        assertTenantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllUpdatablePropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantUpdatableFieldsEquals(expected, actual);
        assertTenantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAutoGeneratedPropertiesEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableFieldsEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant relevant properties")
            .satisfies(e -> assertThat(e.acronym).as("check acronym").isEqualTo(actual.acronym))
            .satisfies(e -> assertThat(e.name).as("check name").isEqualTo(actual.name))
            .satisfies(e -> assertThat(e.description).as("check description").isEqualTo(actual.description))
            .satisfies(e -> assertThat(e.customerBusinessCode).as("check customerBusinessCode").isEqualTo(actual.customerBusinessCode))
            .satisfies(e -> assertThat(e.businessHandlerClazz).as("check businessHandlerClazz").isEqualTo(actual.businessHandlerClazz))
            .satisfies(
                e -> assertThat(e.mainContactPersonDetails).as("check mainContactPersonDetails").isEqualTo(actual.mainContactPersonDetails)
            )
            .satisfies(e -> assertThat(e.billingDetails).as("check billingDetails").isEqualTo(actual.billingDetails))
            .satisfies(
                e ->
                    assertThat(e.technicalEnvironmentsDetails)
                        .as("check technicalEnvironmentsDetails")
                        .isEqualTo(actual.technicalEnvironmentsDetails)
            )
            .satisfies(
                e ->
                    assertThat(e.commonCustomAttributesDetails)
                        .as("check commonCustomAttributesDetails")
                        .isEqualTo(actual.commonCustomAttributesDetails)
            )
            .satisfies(e -> assertThat(e.logoImg).as("check logoImg").isEqualTo(actual.logoImg))
            .satisfies(e -> assertThat(e.logoImgContentType).as("check logoImg contenty type").isEqualTo(actual.logoImgContentType))
            .satisfies(e -> assertThat(e.activationStatus).as("check activationStatus").isEqualTo(actual.activationStatus));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableRelationshipsEquals(Tenant expected, Tenant actual) {}
}
