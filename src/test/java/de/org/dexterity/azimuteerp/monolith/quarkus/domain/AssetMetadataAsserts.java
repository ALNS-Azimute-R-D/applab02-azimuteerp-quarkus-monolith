package de.org.dexterity.azimuteerp.monolith.quarkus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AssetMetadataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetMetadataAllPropertiesEquals(AssetMetadata expected, AssetMetadata actual) {
        assertAssetMetadataAutoGeneratedPropertiesEquals(expected, actual);
        assertAssetMetadataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetMetadataAllUpdatablePropertiesEquals(AssetMetadata expected, AssetMetadata actual) {
        assertAssetMetadataUpdatableFieldsEquals(expected, actual);
        assertAssetMetadataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetMetadataAutoGeneratedPropertiesEquals(AssetMetadata expected, AssetMetadata actual) {
        assertThat(expected)
            .as("Verify AssetMetadata auto generated properties")
            .satisfies(e -> assertThat(e.id).as("check id").isEqualTo(actual.id));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetMetadataUpdatableFieldsEquals(AssetMetadata expected, AssetMetadata actual) {
        assertThat(expected)
            .as("Verify AssetMetadata relevant properties")
            .satisfies(e -> assertThat(e.metadataDetails).as("check metadataDetails").isEqualTo(actual.metadataDetails));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAssetMetadataUpdatableRelationshipsEquals(AssetMetadata expected, AssetMetadata actual) {
        assertThat(expected)
            .as("Verify AssetMetadata relationships")
            .satisfies(e -> assertThat(e.asset).as("check asset").isEqualTo(actual.asset));
    }
}
